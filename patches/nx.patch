diff --git a/src/nx-cloud/nx-cloud-tasks-runner-shell.js b/src/nx-cloud/nx-cloud-tasks-runner-shell.js
index 9339cda1d422f84c886f79791958f0bcaba95bb1..f89bf4ad8e66fe3563eee642290929c8b9303e12 100644
--- a/src/nx-cloud/nx-cloud-tasks-runner-shell.js
+++ b/src/nx-cloud/nx-cloud-tasks-runner-shell.js
@@ -11,6 +11,9 @@ const nxCloudTasksRunnerShell = async (tasks, options, context) => {
         options.clientVersion = version;
         const paths = (0, resolution_helpers_1.findAncestorNodeModules)(__dirname, []);
         nxCloudClient.configureLightClientRequire()(paths);
+        console.log(
+          'DEBUG::nx using nxCloudTasksRunnerShell from light client',
+        )
         return nxCloudClient.nxCloudTasksRunner(tasks, options, context);
     }
     catch (e) {
diff --git a/src/tasks-runner/life-cycle.js b/src/tasks-runner/life-cycle.js
index 4168d75380239273cf46ae84ebc12a65f3a3caba..040347da0cea125778828bdad12fccd51c84aac7 100644
--- a/src/tasks-runner/life-cycle.js
+++ b/src/tasks-runner/life-cycle.js
@@ -3,7 +3,19 @@ Object.defineProperty(exports, "__esModule", { value: true });
 exports.CompositeLifeCycle = void 0;
 class CompositeLifeCycle {
     constructor(lifeCycles) {
-        this.lifeCycles = lifeCycles;
+      Object.defineProperty(this, 'lifeCycles', {
+        get() {
+      console.log('Getter for lifeCycles called', new Error().stack);
+      return this._lifeCycles;
+        },
+        set(value) {
+      console.log('Setter for lifeCycles called', new Error().stack);
+      this._lifeCycles = value;
+        }
+    });
+        this._lifeCycles = lifeCycles;
+
+
     }
     async startCommand() {
         for (let l of this.lifeCycles) {
@@ -51,6 +63,7 @@ class CompositeLifeCycle {
         }
     }
     async endTasks(taskResults, metadata) {
+      console.log("DEBUG::NX this.lifeCycles", this.lifeCycles);
         for (let l of this.lifeCycles) {
             if (l.endTasks) {
                 await l.endTasks(taskResults, metadata);
diff --git a/src/tasks-runner/run-command.js b/src/tasks-runner/run-command.js
index f87f19abf727e52f1cad750148cc560a754bad0a..9766b3fe7906ef6dccea97be90d9eeb67bde1883 100644
--- a/src/tasks-runner/run-command.js
+++ b/src/tasks-runner/run-command.js
@@ -241,6 +241,7 @@ function setEnvVarsBasedOnArgs(nxArgs, loadDotEnvFiles) {
 async function invokeTasksRunner({ tasks, projectGraph, taskGraph, lifeCycle, nxJson, nxArgs, loadDotEnvFiles, initiatingProject, }) {
     setEnvVarsBasedOnArgs(nxArgs, loadDotEnvFiles);
     const { tasksRunner, runnerOptions } = getRunner(nxArgs, nxJson);
+  console.log('DEBUG::NX tasksRUner', tasksRunner);
     let hasher = (0, create_task_hasher_1.createTaskHasher)(projectGraph, nxJson, runnerOptions);
     // this is used for two reasons: to fetch all remote cache hits AND
     // to submit everything that is known in advance to Nx Cloud to run in
@@ -391,6 +392,7 @@ function loadTasksRunner(modulePath) {
             : maybeTasksRunner;
     }
     catch (e) {
+      console.log('DEBUG::NX nxCloudTasksRunnerShell')
         if (e.code === 'MODULE_NOT_FOUND' &&
             (modulePath === 'nx-cloud' || modulePath === '@nrwl/nx-cloud')) {
             return require('../nx-cloud/nx-cloud-tasks-runner-shell')
@@ -425,7 +427,7 @@ function getTasksRunnerPath(runner, nxJson) {
         }
         return modulePath;
     }
-    const isCloudRunner = 
+    const isCloudRunner =
     // No tasksRunnerOptions for given --runner
     nxJson.nxCloudAccessToken ||
         // No runner prop in tasks runner options, check if access token is set.
